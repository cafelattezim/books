리엔지니어링 프로젝트는 생각보다 자주 시작된다.

- 회사의 합병
- 다른 회사의 코드 인수
- 기존 유지보수 인원이 모두 사라졌지만, 코드를 이해할 수 없는 경우  등등..

이런 상황에서 가장 먼저 떠오르는 질문은 "어디서부터 시작해야할까?"이다.

First Contact은 프로젝트 초기에 적용할 수 있는 패턴들을 설명한다. 초기에는 완전히 처음 보는 시스템을 분석해야 하고, 며칠 내에 무엇을 할 수 있는지 판단해 계획을 세워야 한다. 초기 평가 과정은 쉽지 않다. 빠르고 정확한 결과를 원하면서도, 장기적인 영향을 고려해야 하기 때문이다.

### 고려해야할 요소들

#### (a) 레거시 시스템의 복잡성
레거시 시스템은 대체로 규모가 크고 복잡하다. 단일 리엔지니어링 팀이 처리할 수 있는 범위는 한정되어 있으므로 시스템을 한 번에 전부 개선하는 것은 불가능하다. 따라서 작은 단위로 나눠서, 관리 가능한 크기로 작업을 진행해야한다.

그리고 코드를 나눌 때, 기존 시스템 구조와 유지보수 팀의 조직을 최대한 존중하는 것이 중요하다. 구조를 충분히 이해한 후, 목표에 맞는 대안을 고려해야 한다.

#### (b) 목표
짧은 시간 안에 시스템의 주요 이슈를 파악하고, 향후 활동을 계획하거나 필요하다면 프로젝트를 취소하는 것이다.

#### (c) 시간제약
초기 단계에 시간을 낭비하는건 프로젝트 후반에 심각한 결과를 초래한다. 시간을 가장 소중한 자원으로 여기고, 시간 소모적인 활동은 뒤로 미뤄야한다.

#### (d) 초기 단계의 주의사항
불완전한 지식을 기반으로 중요한 결정을 내리는 것은 잘못된 판단으로 이어질 수 있다. 항상 정보 출처를 재확인해야 한다.

#### (e) 사람마다 다른 목표를 가진다.
대부분의 경우, 리엔지니어링 프로젝트에서는 다양한 배경을 가진 사람들과 함꼐 일하게 된다.

* 기존 시스템을 개발한 원래 팀원이 남아있을 수도 있다.
* 오래 유지보수를 해온 사람들이 있을 수도 있다.
* 이 시스템을 중요하게 생각해 리엔지니어링을 요청한 최종 사용자나 관리자도 있다.

리엔지니어링 전문가는 팀원들이 어떤 입장을 가지고 있는지 파악하는 것이 중요하다. 일반적으로 팀원들은 세 가지 유형으로 나뉜다.

* 신뢰하는 사람
	* 리엔지니어링이 필요하다고 믿는 사람들
	* 리엔지니어링 전문가가 그 과정을 도울 수 있다고 신뢰하는 사람
* 회의적인 사람들
	* 리엔지니어링이 시간 낭비라고 생각하는 사람들
* 중립적인 사람
	* 리엔지니어링이 성공할지 확신이 없는 사람
	* 그냥 결과를 지켜보며 판단하려고 한다.

프로젝트를 성공적으로 읶르려면 신뢰하는 사람을 계속 설득하고, 중립적인 사람들에게 신뢰를 얻고, 회의적인 사람들을 조심스럽게 대하는 전략이 필요하다.

### 주요 패턴
##### Chat with the Maintainers (유지보수 담당자와 대화):
시스템 유지보수 담당자와 대화를 통해 프로젝트의 역사적, 정치적 맥락을 파악한다. 이 패턴은 팀원들과 친해지고, 팀원들의 경험과 지식을 얻는 데 매우 효과적이다. 이 과정에서 유지보수 담당자들이 프로젝트에서 무엇을 얻고자 하는지를 파악하는 것이 중요하다.

##### 어려운 점
* 사람들은 자기 일자리를 보호하려고 한다.
	* 일부 유지보수 담당자는 일자리를 잃는 것이 두려워 필요한 정보를 제공하지 않을 수도 있다.
	* 리엔지니어링 프로젝트가 그들의 업무를 더 쉽고, 가치있게 만들기 위해 존재한다는 것을 설득하는 것은 프로젝트 담당자의 몫이다.
	* 그래서 유지보수 담당자에게 프로젝트에서 무엇을 기대하는지 직접 물어봐야 한다.
* 팀이 불안정할 수 있다.
	* 소프트웨어 유지보수는 일반적으로 비주류 업무 (덜 인정받는 업무)로 여겨진다. 그래서 주니어 프로그래머에게 맡겨지거나, 유지보수 팀이 자주 바뀌는 경우가 많다.
	* 이런 상황에서 유지보수 담당자는 소프트웨어 시스템이 어떻게 진화했는지 설명하기 어려울 수 있다.
	* 그러나 소프트웨어 시스템의 정치적 맥락에 대해 많은 것을 알려줄 수는 있다.
	* 팀의 불안정성은 프로젝트의 위험을 증가시키고, 얻는 정보의 신뢰성을 떨어트린다. 그래서 이러한 불안정성을 인지하고 있어야한다. 따라서 수년 동안 개발/유지보수 팀의 일원이었던 사람이 누구진지 물어봐야한다.


